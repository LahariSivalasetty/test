
<!-- saved from url=(0128)http://courses.rvrjc.ac.in/moodle/pluginfile.php/149999/mod_resource/content/1/FindS_Algorithm_Example%20%281%29%20%282%29.ipynb -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></head><body>{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6cba76a4",
   "metadata": {},
   "source": [
    "\n",
    "# Find-S Algorithm in Machine Learning\n",
    "\n",
    "This notebook demonstrates the **Find-S Algorithm**, which is a simple method for learning a conjunctive hypothesis from positive training examples.\n",
    "\n",
    "## Objective\n",
    "To find the most specific hypothesis that fits all the positive examples.\n",
    "\n",
    "## Dataset Format\n",
    "Each example has attributes and a target label (`Yes` or `No`).\n",
    "\n",
    "We will demonstrate this with a simple dataset.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "619c6add",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped="">\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "\n",
       "  \n",
       "    \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "    \n",
       "  \n",
       "  \n",
       "    \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "    \n",
       "    \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "    \n",
       "    \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "    \n",
       "    \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "      \n",
       "    \n",
       "  \n",
       "<table border="\&quot;1\&quot;" class="\&quot;dataframe\&quot;"><thead><tr style="\&quot;text-align:" right;\"=""><th></th><th>Sky</th><th>AirTemp</th><th>Humidity</th><th>Wind</th><th>Water</th><th>Forecast</th><th>EnjoySport</th></tr></thead><tbody><tr><th>0</th><td>Sunny</td><td>Warm</td><td>Normal</td><td>Strong</td><td>Warm</td><td>Same</td><td>Yes</td></tr><tr><th>1</th><td>Sunny</td><td>Warm</td><td>High</td><td>Strong</td><td>Warm</td><td>Same</td><td>Yes</td></tr><tr><th>2</th><td>Rainy</td><td>Cold</td><td>High</td><td>Strong</td><td>Warm</td><td>Change</td><td>No</td></tr><tr><th>3</th><td>Sunny</td><td>Warm</td><td>High</td><td>Strong</td><td>Cool</td><td>Change</td><td>Yes</td></tr></tbody></table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Sky AirTemp Humidity    Wind Water Forecast EnjoySport\n",
       "0  Sunny    Warm   Normal  Strong  Warm     Same        Yes\n",
       "1  Sunny    Warm     High  Strong  Warm     Same        Yes\n",
       "2  Rainy    Cold     High  Strong  Warm   Change         No\n",
       "3  Sunny    Warm     High  Strong  Cool   Change        Yes"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Define a simple weather dataset\n",
    "data = pd.DataFrame([\n",
    "    ['Sunny', 'Warm', 'Normal', 'Strong', 'Warm', 'Same', 'Yes'],\n",
    "    ['Sunny', 'Warm', 'High', 'Strong', 'Warm', 'Same', 'Yes'],\n",
    "    ['Rainy', 'Cold', 'High', 'Strong', 'Warm', 'Change', 'No'],\n",
    "    ['Sunny', 'Warm', 'High', 'Strong', 'Cool', 'Change', 'Yes']\n",
    "], columns=['Sky', 'AirTemp', 'Humidity', 'Wind', 'Water', 'Forecast', 'EnjoySport'])\n",
    "\n",
    "data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4a1c2f49",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final Hypothesis:\n",
      "Sky          Sunny\n",
      "AirTemp       Warm\n",
      "Humidity         ?\n",
      "Wind        Strong\n",
      "Water            ?\n",
      "Forecast         ?\n",
      "Name: 0, dtype: object\n"
     ]
    }
   ],
   "source": [
    "\n",
    "def find_s_algorithm(data):\n",
    "    # Get only positive examples\n",
    "    positive_examples = data[data['EnjoySport'] == 'Yes'].drop(columns=['EnjoySport'])\n",
    "\n",
    "    # Initialize hypothesis with the first positive example\n",
    "    hypothesis = positive_examples.iloc[0].copy()\n",
    "\n",
    "    # Iterate through the remaining examples\n",
    "    for i in range(1, len(positive_examples)):\n",
    "        for attr in hypothesis.index:\n",
    "            if hypothesis[attr] != positive_examples.iloc[i][attr]:\n",
    "                hypothesis[attr] = '?'\n",
    "\n",
    "    return hypothesis\n",
    "\n",
    "hypothesis = find_s_algorithm(data)\n",
    "print(\"Final Hypothesis:\")\n",
    "print(hypothesis)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31456c75",
   "metadata": {},
   "source": [
    "\n",
    "## Interpretation\n",
    "\n",
    "The final hypothesis is the most specific generalization that covers all the positive examples.\n",
    "The `?` symbol represents any value, showing generalization.\n",
    "\n",
    "If an attribute varies in the positive examples, we generalize it with `?`.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
</body></html>